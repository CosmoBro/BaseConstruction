CONTRACT_TYPE
{
    name = BaseScan
	group = BaseCreate 
	title = Scan for a suitable location for a new Base       
	description = Someone has told us that it was impossible to build a base outside Kerbin. We need to say him that he is wrong.
	synopsis = We want you to look for a location for a new Base. 
	completedMessage = You have scan the initial location of a new base.
    minExpiry = 0.0
	maxExpiry = 7.0
	deadline = 500
	cancellable = true
	declinable = true 
	autoAccept = false
	prestige = Significant    
	maxCompletions = 1
	maxSimultaneous = 1    
	rewardScience = 60.0
	rewardReputation = 10.0
	rewardFunds = 90000.0
	failureReputation = 10.0
	failureFunds = 100000.0
	advanceFunds = 1000.0
	weight = 15.0
	DATA
    {
        type = CelestialBody
        requiredValue = false
        targetBody1 = AllBodies().Where(b => b.HasSurface())
    }
	DATA
    {
        type = CelestialBody
        requiredValue = false
        targetBody2 = Homeworld()
    }    
    PARAMETER
    {
        name = Orbit       
        type = Orbit
        title = Reach a polar orbit on a planet that has surface
		notes = Orbit the planet where you wish to build a base with an inclination betwen 80 and 100
		targetBody = @/targetBody1
		minInclination = 80
		maxInclination = 100		
    }
	PARAMETER
    {
        name = NewScaner
        type = VesselParameterGroup
        hideChildren = false
        title = Launch a new scanner into Kerbin orbit
		define = BaseScanner
        notes = The Scanner must be unmanned, have an antenna and have a way to generate electric charge.
	    PARAMETER
        {
        name = HasCrew
		type = HasCrew
		maxCrew = 0
		minCrew = 0
        }
		PARAMETER
		{
            name = Antenna
			title = Have an antenna on board
			type = PartValidation
			hideChildren = true
			partModule = ModuleDataTransmitter
			minCount = 1 	     
		}
	    PARAMETER
        {
            name = Any
			type = Any
			hideChildren = true		
			title = Can Generate Power
			PARAMETER
			{
                name = Solar
				type = PartValidation
				hideChildren = true
				partModule = ModuleDeployableSolarPanel
				minCount = 1 	     
			}
			PARAMETER
			{
                name = Generator
				type = PartValidation
				hideChildren = true
				partModule = ModuleGenerator
				minCount = 1 
			}
			PARAMETER
			{
                name = Generator
				type = PartValidation
				hideChildren = true
				part = FuelCell
				minCount = 1 	
			}
			PARAMETER
			{
                name = Generator
				type = PartValidation
				hideChildren = true
				part = FuelCellArray
				minCount = 1
			}    
        }
	    PARAMETER
		{
            name = ReachState
			type = ReachState
			situation = ORBITING
			targetBody = @/targetBody2
			title = Orbit @/targetBody2
        }
	}
	PARAMETER:NEEDS[SCANsat]
    { 
        name = SCANsatCoverage
		type = SCANsatCoverage
		targetBody = @/targetBody1
		coverage = 75.0
		scanType = AltimetryLoRes
    }
	PARAMETER
    {
        name = PerformOrbitalSurvey
		type = PerformOrbitalSurvey
		targetBody = @/targetBody1
    }
	BEHAVIOUR
    {
        name = ExperimentalPart
		type = ExperimentalPart
		part = SurveyScanner
		add = True
		remove = True

    }
	REQUIREMENT:NEEDS[SCANsat]
    {
        name = PartModuleUnlocked
		type = PartModuleUnlocked
		partModule = SCANsat
    }
	REQUIREMENT
    {
        name = Landing
        type = Landing    
        targetBody = AllBodies().where(b => b.!IsHomeworld())
    }
}