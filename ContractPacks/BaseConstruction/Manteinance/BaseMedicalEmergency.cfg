CONTRACT_TYPE
{
    //Credits to Severedsolo
    name = BaseMedicalEmergency
    title = Medical Emergency on board @/targetVessel1
    group = BaseMaintenance
	description = Oh dear! Poor @/targetKerbal1 is feeling quite poorly. Just to be safe, we'd like you to bring him home.
    synopsis = Bring @/targetKerbal1 back to @/targetBody2 for medical examination
    completedMessage = Our Medics tell me that @/targetKerbal1 is going to make it. Thanks to you!
    minExpiry = 1
    maxExpiry = 7
	maxSimultaneous = 1
    deadline = Random(500,1000)
    cancellable = false
    declinable = true
    rewardScience = 0.0
    rewardReputation = Random(10.0, 20.0)
    rewardFunds = Random(40000, 60000.0)
    failureReputation = Random(5, 10.0)
    failureFunds = Random(1000, 10000.0)
    advanceFunds = Random(1000, 10000.0)
    weight = 5.0
    DATA
    {
        type = Vessel
		requiredValue = true
		targetVessel1 = [ Any ].Where(v => v.IsLanded()).Where(v => v.VesselType()== Base).Concat([ Base1 ]).Where(v => v.CrewCount()>= 1).Random()
    }
	DATA
	{
        type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
    }
	DATA
    {
        type = CelestialBody
        requiredValue = false
        targetBody2 = HomeWorld()
    }
	DATA
	{
		type = Kerbal
		uniqueValue = true
		targetKerbal1 = @targetVessel1.Crew().Random()
	}    
	DATA
	{
        type = Location
		vesselLocation = @targetVessel1.Location()
    }
	PARAMETER
	{
		name = RecoverKerbal
		type = RecoverKerbal
		kerbal = @/targetKerbal1
		title = Recover @/targetKerbal1
	}
   	REQUIREMENT
    {
        name = CompleteContract
		type = CompleteContract
		contractType = BaseMedicalEmergency
		minCount = 0
		cooldownDuration = Random(7d, 15d )
	}
}